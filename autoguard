<script>
  document.addEventListener("DOMContentLoaded", function () {
    const products = Array.from(document.querySelectorAll(".product-btn")).map(
      (button) => ({
        id: button.dataset.id,
        name: button.dataset.name,
        price: button.dataset.price,
        amount: button.dataset.amount,
        status: button.dataset.status,
      })
    );

    const searchInput = document.getElementById("searchInput");
    const searchResults = document.getElementById("searchResults");
    const searchClear = document.getElementById("searchClear");

    // Array para almacenar los productos seleccionados
    const selectedProducts = [];

    searchInput.addEventListener("input", function () {
      const searchTerm = this.value.toLowerCase();
      const matchingProducts = products.filter((product) =>
        product.name.toLowerCase().includes(searchTerm)
      );

      searchResults.innerHTML = ""; // Limpiar resultados anteriores
      
      matchingProducts.forEach((product) => {
        const listItem = document.createElement("div");
        listItem.classList.add("dropdown-item");
        listItem.innerHTML = `
        <div class="product-info border-bottom border-2 border-dark">
          <div class="divider">ID: ${product.id}</div>
          <div>Name: ${product.name}</div>
          <div>Price: ${product.price}$</div>
          <div>Amount: ${product.amount}</div>
          <div>Status: ${product.status}</div>
        </div>
      `;
        // Agregar evento click para guardar producto seleccionado
        listItem.addEventListener("click", function () {
          const productInfo = [
            product.id,
            product.name,
            product.amount,
            product.price,
          ];
          selectedProducts.push(productInfo);
          console.log("Producto seleccionado:", productInfo);
        });
        searchResults.appendChild(listItem);
      });

      if (matchingProducts.length > 0) {
        searchResults.style.display = "block";
      } else {
        searchResults.style.display = "none";
      }
    });

    document.addEventListener("click", function (event) {
      if (
        !searchResults.contains(event.target) &&
        event.target !== searchInput
      ) {
        searchResults.style.display = "none";
        searchInput.value = ""; // Limpiar el input de búsqueda
      }
    });

    searchClear.addEventListener("click", function () {
      searchResults.style.display = "none";
      searchInput.value = ""; // Limpiar el input de búsqueda
      
    });
  });

  document.addEventListener("DOMContentLoaded", function () {
  const searchInput = document.getElementById("searchInput");
  const searchResults = document.getElementById("searchResults");
  const addButton = document.getElementById("addButton");

  let selectedProduct = null;

  // Maneja la selección de un producto de la lista generada
  searchResults.addEventListener("click", function (event) {
    const listItem = event.target.closest(".dropdown-item");
    if (!listItem) return;

    const productInfo = [
      listItem.dataset.id,
      listItem.dataset.name,
      listItem.dataset.amount,
      listItem.dataset.price,
    ];

    // Guarda la información del producto seleccionado
    selectedProduct = productInfo;
    console.log("Producto seleccionado:", selectedProduct);
  });

  // Agrega el producto seleccionado a la tabla al hacer clic en el botón "Add product"
  addButton.addEventListener("click", function () {
    if (!selectedProduct) {
      alert("No hay ningún producto seleccionado.");
      return;
    }

    // Verificar si el producto ya existe en la tabla
    const existingProduct = Array.from(
      tableBody.querySelectorAll("tr")
    ).find((row) => row.dataset.id === selectedProduct[0]);
    if (existingProduct) {
      // Mostrar el modal si el producto ya existe
      const productExistsModal = new bootstrap.Modal(
        document.getElementById("productExistsModal")
      );
      productExistsModal.show();
      return; // Salir de la función si el producto ya existe
    }

    // Si el producto no existe, agregarlo a la tabla
    const newRow = document.createElement("tr");
    newRow.dataset.id = selectedProduct[0];
    newRow.innerHTML = `
      <th scope="row" style="text-align: center; margin: auto;">${
        tableBody.querySelectorAll("tr").length + 1
      }</th>
      <td style="text-align: center; margin: auto;">${selectedProduct[0]}</td>
      <td>${selectedProduct[1]}</td>
      <td style="text-align: center;">
        <input type="number" class="form-control" value="1" min="1" max="${
          selectedProduct[2]
        }" onkeydown="return false" onpaste="return false" onfocus="this.blur();" style="background: transparent; border: none; padding: 0; width: 80px; font-size: 17px; text-align: center; margin: auto;" />
      </td>
      <td style="text-align: center; margin: auto;">${selectedProduct[3]}$</td>
      <td class="text-center d-flex justify-content-center align-items-center">
        <button type="button" class="delete-btn btn-danger mx-2" onclick="deleteProduct(this)">
          <span class="material-symbols-outlined"> delete </span>
        </button>
      </td>
    `;

    tableBody.appendChild(newRow);
  });

  // Filtrar los productos al escribir en el campo de búsqueda
  searchInput.addEventListener("input", function () {
    const searchTerm = this.value.toLowerCase();
    const matchingProducts = products.filter((product) =>
      product.name.toLowerCase().includes(searchTerm)
    );

    // Limpiar los resultados anteriores y mostrar los nuevos resultados
    searchResults.innerHTML = "";
    matchingProducts.forEach((product) => {
      const listItem = document.createElement("div");
      listItem.classList.add("dropdown-item");
      listItem.dataset.id = product.id;
      listItem.dataset.name = product.name;
      listItem.dataset.amount = product.amount;
      listItem.dataset.price = product.price;
      listItem.innerHTML = `
        <div class="product-info border-bottom border-2 border-dark">
          <div class="divider">ID: ${product.id}</div>
          <div>Name: ${product.name}</div>
          <div>Price: ${product.price}$</div>
          <div>Amount: ${product.amount}</div>
        </div>
      `;
      searchResults.appendChild(listItem);
    });
  });
});
</script>



                const termToIcon = {
                    'pcs': '📦',     // Representación de caja para piezas
                    'L': '🍶',       // Botella para litros
                    'ml': '🍶',      // Botella para mililitros
                    'kg': '⚖️',     // Balanza para kilogramos
                    'g': '⚖️'       // Balanza para gramos
                  };


                  def procesar_venta():
                  if request.method == 'POST':
                      # Obtener los datos enviados desde el cliente
                      datos_venta = request.json
                      
                      # Procesar los datos
                      for venta in datos_venta:
                          id_registro = venta['id']
                          cantidad = venta['quantity']
                          nombre_producto = venta['productName']
                          precio = venta['price']
                          
                          # Aquí puedes realizar las acciones necesarias con estos datos, como guardarlos en una base de datos
                          
                      # Devolver una respuesta (opcional)
                      return jsonify({'message': 'Datos de venta recibidos correctamente'}), 200